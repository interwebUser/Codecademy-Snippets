{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11905\paperh16837\margl1440\margr1440\vieww18840\viewh12400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Programming Concept Summaries by Khalil Najjar\
\
Concept: Hash Maps\
Pre-requisite knowledge: arrays, lists, modulus, encode()\
\
\
Hash map: A key-value store that uses an array and a hashing function to save and retrieve values.\
Key: The identifier given to a value for later retrieval.\
Hash function: A function that takes some input and returns a number.\
Compression function: A function that transforms its inputs into some smaller range of possible outputs.\
\
\ul Recipe for saving to a hash table:\ulnone \
- Take the key and plug it into the hash function, getting the hash code.\
- Modulo that hash code by the length of the underlying array, getting an array index. (Compression Function)\
- Check if the array at that index is empty, if so, save the value (and the key) there.\
- If the array is full at that index continue to the next possible position depending on your collision strategy.\
\
\ul Recipe for retrieving from a hash table:\ulnone \
- Take the key and plug it into the hash function, getting the hash code.\
- Modulo that hash code by the length of the underlying array, getting an array index. (Compression Function)\
- Check if the array at that index has contents, if so, check the key saved there.\
- If the key matches the one you're looking for, return the value.\
- If the keys don't match, continue to the next position depending on your collision strategy.\
\
\ul Dealing with Collisions:\ulnone \
Two important Strategies:\
- Separate Chaining: Each array index points to a different data structure (linked list) which holds the key:value pairs\
- Open Addressing: Collision triggers a probing sequence (linear or non-linear) to find where to store the key:value pair for a given key}